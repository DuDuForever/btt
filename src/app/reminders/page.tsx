
"use client"

import * as React from "react"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { User, MessageSquare, Send } from "lucide-react"
import { getClients } from "@/lib/data"
import type { Client, Visit } from "@/lib/types"
import { format } from "date-fns"
import { Card, CardContent } from "@/components/ui/card"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"

interface UnpaidClient {
  id: string
  name: string
  phone: string
  totalDue: number
  unpaidVisits: Visit[]
}

const SALON_NAME_STORAGE_KEY = "salon-name-storage";

export default function RemindersPage() {
  const [unpaidClients, setUnpaidClients] = React.useState<UnpaidClient[]>([])
  const [isLoading, setIsLoading] = React.useState(true)
  const [selectedClient, setSelectedClient] = React.useState<UnpaidClient | null>(null)
  const [salonName, setSalonName] = React.useState("Your Salon")
  const [editableMessage, setEditableMessage] = React.useState("")
  
  React.useEffect(() => {
    // This effect runs once on mount to load the salon name from localStorage
    const savedSalonName = localStorage.getItem(SALON_NAME_STORAGE_KEY);
    if (savedSalonName) {
      setSalonName(savedSalonName);
    }

    async function fetchUnpaidClients() {
      setIsLoading(true)
      const allClients = await getClients()
      const clientsWithDues = allClients
        .map(client => {
          const unpaidVisits = client.visits.filter(v => !v.paid)
          if (unpaidVisits.length === 0) return null

          const totalDue = unpaidVisits.reduce((acc, v) => acc + v.amount, 0)
          return {
            id: client.id,
            name: client.name,
            phone: client.phone,
            totalDue,
            unpaidVisits,
          }
        })
        .filter((c): c is UnpaidClient => c !== null)
        .sort((a,b) => b.totalDue - a.totalDue)
      
      setUnpaidClients(clientsWithDues)
      setIsLoading(false)
    }

    fetchUnpaidClients()
  }, [])

  const handleSalonNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newName = e.target.value;
    setSalonName(newName);
    localStorage.setItem(SALON_NAME_STORAGE_KEY, newName);
  }

  const generateMessage = (client: UnpaidClient) => {
    const visitDetails = client.unpaidVisits.map(v => 
        `- Services on ${format(new Date(v.date), 'PPP')}: ${v.services.join(', ')} ($${v.amount.toFixed(2)})`
    ).join('\n');

    return `**This is an autogenerated reminder from ${salonName}**

Hi ${client.name}, this is a friendly reminder regarding your outstanding balance of $${client.totalDue.toFixed(2)}.
Details:
${visitDetails}

Please let us know if you have any questions. Thank you!`;
  };

  React.useEffect(() => {
    if (selectedClient) {
      setEditableMessage(generateMessage(selectedClient))
    }
  }, [selectedClient, salonName])
  
  const handleSms = () => {
    if (!selectedClient) return;
    const phoneNumber = selectedClient.phone.replace(/\D/g, '');
    window.location.href = `sms:${phoneNumber}?body=${encodeURIComponent(editableMessage)}`;
  }
  
  const handleWhatsApp = () => {
    if (!selectedClient) return;
    const phoneNumber = selectedClient.phone.replace(/\D/g, '');
    window.open(`https://wa.me/${phoneNumber}?text=${encodeURIComponent(editableMessage)}`, '_blank');
  }

  return (
    <div className="flex-1 space-y-4 p-4 md:p-8 pt-6">
      <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Payment Reminders</h2>
          <p className="text-muted-foreground">
            A list of clients with outstanding payments.
          </p>
        </div>
        <div className="w-full md:w-72">
            <Label htmlFor="salon-name">Your Salon Name</Label>
            <Input 
                id="salon-name"
                value={salonName}
                onChange={handleSalonNameChange}
                placeholder="Enter your salon or business name"
            />
        </div>
      </div>

      <Dialog onOpenChange={(isOpen) => !isOpen && setSelectedClient(null)}>
        <Card>
          <CardContent className="p-0">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Client</TableHead>
                  <TableHead>Phone Number</TableHead>
                  <TableHead className="text-right">Amount Due</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {isLoading ? (
                  Array.from({ length: 5 }).map((_, i) => (
                    <TableRow key={i}>
                      <TableCell>
                        <div className="flex items-center gap-4">
                          <Skeleton className="h-10 w-10 rounded-full" />
                          <Skeleton className="h-4 w-24" />
                        </div>
                      </TableCell>
                      <TableCell><Skeleton className="h-4 w-32" /></TableCell>
                      <TableCell className="text-right"><Skeleton className="h-4 w-20" /></TableCell>
                    </TableRow>
                  ))
                ) : unpaidClients.length > 0 ? (
                  unpaidClients.map((client) => (
                    <DialogTrigger asChild key={client.id}>
                        <TableRow className="cursor-pointer" onClick={() => setSelectedClient(client)}>
                        <TableCell>
                            <div className="flex items-center gap-4 group">
                            <Avatar className="h-10 w-10 border">
                                <AvatarFallback><User className="h-5 w-5"/></AvatarFallback>
                            </Avatar>
                            <span className="font-medium group-hover:text-primary transition-colors">{client.name}</span>
                            </div>
                        </TableCell>
                        <TableCell>
                            <span className="text-muted-foreground">{client.phone}</span>
                        </TableCell>
                        <TableCell className="text-right font-semibold text-destructive">
                            ${client.totalDue.toFixed(2)}
                        </TableCell>
                        </TableRow>
                    </DialogTrigger>
                  ))
                ) : (
                  <TableRow>
                      <TableCell colSpan={3} className="h-24 text-center">
                        All caught up! No clients with unpaid visits.
                      </TableCell>
                    </TableRow>
                )}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
        
        {selectedClient && (
            <DialogContent className="sm:max-w-md">
                <DialogHeader>
                    <DialogTitle>Send Reminder to {selectedClient.name}</DialogTitle>
                    <DialogDescription>
                        Edit the message below, then choose how to send it.
                    </DialogDescription>
                </DialogHeader>
                <div className="space-y-4 py-4">
                    <Textarea 
                        value={editableMessage}
                        onChange={(e) => setEditableMessage(e.target.value)}
                        className="min-h-[200px] whitespace-pre-wrap"
                    />
                    <div className="grid grid-cols-2 gap-4">
                        <Button onClick={handleSms}>
                            <MessageSquare className="mr-2 h-4 w-4" /> Send SMS
                        </Button>
                        <Button onClick={handleWhatsApp} className="bg-green-600 hover:bg-green-700">
                           <Send className="mr-2 h-4 w-4" /> Send via WhatsApp
                        </Button>
                    </div>
                </div>
            </DialogContent>
        )}
      </Dialog>
    </div>
  )
}
